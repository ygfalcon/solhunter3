// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActionExecuted {
    #[prost(string, tag = "1")]
    pub action_json: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub result_json: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeightsUpdated {
    #[prost(map = "string, double", tag = "1")]
    pub weights: ::std::collections::HashMap<::prost::alloc::string::String, f64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RlWeights {
    #[prost(map = "string, double", tag = "1")]
    pub weights: ::std::collections::HashMap<::prost::alloc::string::String, f64>,
    #[prost(map = "string, double", tag = "2")]
    pub risk: ::std::collections::HashMap<::prost::alloc::string::String, f64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RlCheckpoint {
    #[prost(double, tag = "1")]
    pub time: f64,
    #[prost(string, tag = "2")]
    pub path: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PortfolioUpdated {
    #[prost(map = "string, double", tag = "1")]
    pub balances: ::std::collections::HashMap<::prost::alloc::string::String, f64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenInfo {
    #[prost(double, tag = "1")]
    pub bids: f64,
    #[prost(double, tag = "2")]
    pub asks: f64,
    #[prost(double, tag = "3")]
    pub tx_rate: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenAgg {
    #[prost(map = "string, message", tag = "1")]
    pub dex: ::std::collections::HashMap<::prost::alloc::string::String, TokenInfo>,
    #[prost(double, tag = "2")]
    pub bids: f64,
    #[prost(double, tag = "3")]
    pub asks: f64,
    #[prost(double, tag = "4")]
    pub tx_rate: f64,
    #[prost(int64, tag = "5")]
    pub ts: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepthUpdate {
    #[prost(map = "string, message", tag = "1")]
    pub entries: ::std::collections::HashMap<::prost::alloc::string::String, TokenAgg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepthDiff {
    #[prost(map = "string, message", tag = "1")]
    pub entries: ::std::collections::HashMap<::prost::alloc::string::String, TokenAgg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepthServiceStatus {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Heartbeat {
    #[prost(string, tag = "1")]
    pub service: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TradeLogged {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub direction: ::prost::alloc::string::String,
    #[prost(double, tag = "3")]
    pub amount: f64,
    #[prost(double, tag = "4")]
    pub price: f64,
    #[prost(string, tag = "5")]
    pub reason: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub context: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub emotion: ::prost::alloc::string::String,
    #[prost(int64, tag = "8")]
    pub simulation_id: i64,
    #[prost(string, tag = "9")]
    pub uuid: ::prost::alloc::string::String,
    #[prost(int64, tag = "10")]
    pub trade_id: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RlMetrics {
    #[prost(double, tag = "1")]
    pub loss: f64,
    #[prost(double, tag = "2")]
    pub reward: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SystemMetrics {
    #[prost(double, tag = "1")]
    pub cpu: f64,
    #[prost(double, tag = "2")]
    pub memory: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PriceUpdate {
    #[prost(string, tag = "1")]
    pub venue: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub token: ::prost::alloc::string::String,
    #[prost(double, tag = "3")]
    pub price: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RouteRequest {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    #[prost(double, tag = "2")]
    pub amount: f64,
    #[prost(uint32, tag = "3")]
    pub max_hops: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RouteResponse {
    #[prost(string, repeated, tag = "1")]
    pub path: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(double, tag = "2")]
    pub profit: f64,
    #[prost(double, tag = "3")]
    pub slippage: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConfigUpdated {
    #[prost(string, tag = "1")]
    pub config_json: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PendingSwap {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
    #[prost(double, tag = "3")]
    pub size: f64,
    #[prost(double, tag = "4")]
    pub slippage: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoteSystemMetrics {
    #[prost(double, tag = "1")]
    pub cpu: f64,
    #[prost(double, tag = "2")]
    pub memory: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoubleList {
    #[prost(double, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<f64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RiskMetrics {
    #[prost(double, tag = "1")]
    pub covariance: f64,
    #[prost(double, tag = "2")]
    pub portfolio_cvar: f64,
    #[prost(double, tag = "3")]
    pub portfolio_evar: f64,
    #[prost(double, tag = "4")]
    pub correlation: f64,
    #[prost(message, repeated, tag = "5")]
    pub cov_matrix: ::prost::alloc::vec::Vec<DoubleList>,
    #[prost(message, repeated, tag = "6")]
    pub corr_matrix: ::prost::alloc::vec::Vec<DoubleList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RiskUpdated {
    #[prost(double, tag = "1")]
    pub multiplier: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SystemMetricsCombined {
    #[prost(double, tag = "1")]
    pub cpu: f64,
    #[prost(double, tag = "2")]
    pub memory: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenDiscovered {
    #[prost(string, repeated, tag = "1")]
    pub tokens: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemorySyncRequest {
    #[prost(int64, tag = "1")]
    pub last_id: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemorySyncResponse {
    #[prost(message, repeated, tag = "1")]
    pub trades: ::prost::alloc::vec::Vec<TradeLogged>,
    #[prost(bytes = "vec", tag = "2")]
    pub index: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Event {
    #[prost(string, tag = "1")]
    pub topic: ::prost::alloc::string::String,
    #[prost(
        oneof = "event::Kind",
        tags = "2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23"
    )]
    pub kind: ::core::option::Option<event::Kind>,
}
/// Nested message and enum types in `Event`.
pub mod event {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kind {
        #[prost(message, tag = "2")]
        ActionExecuted(super::ActionExecuted),
        #[prost(message, tag = "3")]
        WeightsUpdated(super::WeightsUpdated),
        #[prost(message, tag = "4")]
        RlWeights(super::RlWeights),
        #[prost(message, tag = "5")]
        RlCheckpoint(super::RlCheckpoint),
        #[prost(message, tag = "6")]
        PortfolioUpdated(super::PortfolioUpdated),
        #[prost(message, tag = "7")]
        DepthUpdate(super::DepthUpdate),
        #[prost(message, tag = "8")]
        DepthServiceStatus(super::DepthServiceStatus),
        #[prost(message, tag = "9")]
        Heartbeat(super::Heartbeat),
        #[prost(message, tag = "10")]
        TradeLogged(super::TradeLogged),
        #[prost(message, tag = "11")]
        RlMetrics(super::RlMetrics),
        #[prost(message, tag = "12")]
        SystemMetrics(super::SystemMetrics),
        #[prost(message, tag = "13")]
        PriceUpdate(super::PriceUpdate),
        #[prost(message, tag = "14")]
        ConfigUpdated(super::ConfigUpdated),
        #[prost(message, tag = "15")]
        PendingSwap(super::PendingSwap),
        #[prost(message, tag = "16")]
        RemoteSystemMetrics(super::RemoteSystemMetrics),
        #[prost(message, tag = "17")]
        RiskMetrics(super::RiskMetrics),
        #[prost(message, tag = "18")]
        RiskUpdated(super::RiskUpdated),
        #[prost(message, tag = "19")]
        SystemMetricsCombined(super::SystemMetricsCombined),
        #[prost(message, tag = "20")]
        TokenDiscovered(super::TokenDiscovered),
        #[prost(message, tag = "21")]
        MemorySyncRequest(super::MemorySyncRequest),
        #[prost(message, tag = "22")]
        MemorySyncResponse(super::MemorySyncResponse),
        #[prost(message, tag = "23")]
        DepthDiff(super::DepthDiff),
    }
}
