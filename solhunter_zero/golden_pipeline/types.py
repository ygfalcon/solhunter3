"""Structured event models for the Golden Snapshot pipeline."""

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime
from typing import Any, Dict, List, Optional, Sequence


Timestamp = float


@dataclass(slots=True)
class DiscoveryCandidate:
    """Token identified by the discovery stage."""

    mint: str
    asof: Timestamp


@dataclass(slots=True)
class TokenSnapshot:
    """Token metadata emitted by the enrichment stage."""

    mint: str
    symbol: str
    name: str
    decimals: int
    token_program: str
    venues: Sequence[str] | None = None
    flags: Dict[str, Any] = field(default_factory=dict)
    asof: Timestamp = 0.0


@dataclass(slots=True)
class TapeEvent:
    """Normalised swap or trade event from on-chain market data."""

    mint_base: str
    mint_quote: str
    amount_base: float
    amount_quote: float
    route: str
    program_id: str
    pool: str
    signer: str
    signature: str
    slot: int
    ts: Timestamp
    fees_base: float
    price_usd: float
    fees_usd: float
    is_self: bool = False
    buyer: Optional[str] = None


@dataclass(slots=True)
class OHLCVBar:
    """Closed 5-minute OHLCV bar."""

    mint: str
    open: float
    high: float
    low: float
    close: float
    vol_usd: float
    trades: int
    buyers: int
    zret: float
    zvol: float
    asof_close: Timestamp


@dataclass(slots=True)
class DepthSnapshot:
    """Executable depth snapshot for a token."""

    mint: str
    venue: str
    mid_usd: float
    spread_bps: float
    depth_pct: Dict[str, float]
    asof: Timestamp


@dataclass(slots=True)
class GoldenSnapshot:
    """Canonical input consumed by agents."""

    mint: str
    asof: Timestamp
    meta: Dict[str, Any]
    px: Dict[str, Any]
    liq: Dict[str, Any]
    ohlcv5m: Dict[str, Any]
    hash: str


@dataclass(slots=True)
class TradeSuggestion:
    """Deterministic agent output derived from a Golden Snapshot."""

    agent: str
    mint: str
    side: str
    notional_usd: float
    max_slippage_bps: float
    risk: Dict[str, Any]
    confidence: float
    inputs_hash: str
    ttl_sec: float
    generated_at: Timestamp


@dataclass(slots=True)
class Decision:
    """Swarm-voted trading decision."""

    mint: str
    side: str
    notional_usd: float
    score: float
    snapshot_hash: str
    client_order_id: str
    agents: List[str]
    ts: Timestamp


@dataclass(slots=True)
class VirtualFill:
    """Synthetic fill generated by the shadow executor."""

    order_id: str
    mint: str
    side: str
    qty_base: float
    price_usd: float
    fees_usd: float
    slippage_bps: float
    snapshot_hash: str
    route: str
    ts: Timestamp


@dataclass(slots=True)
class LiveFill:
    """Real fill generated by the live executor."""

    sig: str
    mint: str
    side: str
    qty_base: float
    price_usd: float
    fees_usd: float
    slippage_bps: float
    route: str
    snapshot_hash: str

